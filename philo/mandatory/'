/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philosophers.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: clorcery <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/11/24 13:57:47 by clorcery          #+#    #+#             */
/*   Updated: 2022/11/28 11:56:11 by clorcery         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../include/philo.h"
#include <unistd.h>

//pthread_mutex_lock(&banquet->mutex_print);
//printf("\n");
//pthread_mutex_unlock(&banquet->mutex_print);

int	ft_is_thinking(t_philo *philo)
{
	t_banquet 		*banquet;

	banquet = (t_banquet *)philo->banquet;
	if (philo->pos_philo % 2 == 0)
		usleep(50);
	else
		usleep(80);
	if (ft_display(philo, banquet, "\033[1;35mis thinking\033[0;0m") == -1)
		return (-1);
	return (0);
}

int	ft_recup_info_eat(t_philo *philo, t_banquet *banquet)
{
	philo->time_eat = ft_change_time(banquet);
	if (philo->time_eat == -1)
		return (-1);
	philo->had_eat = TRUE;
	if (banquet->nb_must_eat != -1)
		philo->nb_eat += 1;
	return (0);
}

int	ft_usleep(t_banquet *banquet)
{
	int	time;
	int	time_passed;
	int	res;

	time = ft_change_time(banquet);
	if (time == -1)
		return (-1);
	while (1)
	{
		time_passed = ft_change_time(banquet);
		if (time_passed == -1)
			return (-1);
		if (time_passed - time == banquet->time_eat)
			break ; 
		if (time_passed - time < banquet->time_eat)
		{
			res = usleep(25);
			if (ft_verif_res(res, "usleep") == -1)
				return (-1);
		}
		if ((time_passed - time) + banquet->time_sleep > banquet->time_die)
		{
			banquet->end = TRUE;
			break ;
		}
	}
	return (0);
}

int	ft_is_eating(t_philo *philo, t_banquet *banquet)
{
	int	res;
	
	res = pthread_mutex_lock(&banquet->mutex_fork[philo->fork_left]);
	if (ft_verif_res(res, "Mutex lock") == -1)
		return (-1);
	if (ft_display(philo, banquet, "\033[1;32mhas taken a fork\033[0;0m") == -1)
		return (-1);
	res = pthread_mutex_lock(&banquet->mutex_fork[philo->fork_right]);
	if (ft_verif_res(res, "Mutex lock") == -1)
		return (-1);
	if (ft_display(philo, banquet, "\033[1;32mhas taken a fork\033[0;0m") == -1)
		return (-1);
	if (ft_recup_info_eat(philo, banquet) == -1) // bien place ??
		return (-1);
	if (ft_display(philo, banquet, "\033[1;34mis eating\033[0;0m") == -1)
		return (-1);
	if (ft_usleep(banquet) == -1) //ft_usleep
		return (-1);
	res = pthread_mutex_unlock(&banquet->mutex_fork[philo->fork_right]);
	if (ft_verif_res(res, "Mutex unlock") == -1)
		return (-1);
	res = pthread_mutex_unlock(&banquet->mutex_fork[philo->fork_left]);
	if (ft_verif_res(res, "Mutex unlock") == -1)
		return (-1);
	return (0);
}

int	ft_philo_nb_eat(t_banquet *banquet)
{
	int	i;
	int	eat_ok;

	i = 0;
	eat_ok = 0;
	while(i < banquet->nb_philo)
	{
		if (banquet->philo[i].nb_eat == banquet->nb_must_eat)
			eat_ok++;	
		i++;
	}
	if (eat_ok == i)
		return (TRUE);
	return (FALSE);
}

/* int	ft_find_dead_philo(t_banquet *banquet) */
/* { */
/* 	int	i; */
/*  */
/* 	i = 0; */
/* 	while(i < banquet->nb_philo) */
/* 	{ */
/* 		if (banquet->philo[i].dead_philo == TRUE) */
/* 		{ */
/* 			if (ft_display(&banquet->philo[i], banquet, */
/* 						"\033[1;31mdied\033[0;0m") == -1) */
/* 				return (-1); */
/* 			break ; */
/* 		} */
/* 		i++; */
/* 	} */
/* 	return(0); */
/*  */
/* } */

void	*ft_verif_die(void	*struc)
{
	t_banquet 		*banquet;
	int	current_time;
	int	result;
	int	tmp;
	int	i;

	banquet = (t_banquet *)struc;
	i = 0;
	while (i < banquet->nb_philo)
	{
		usleep(2);
		current_time = ft_change_time(banquet);
		result = current_time - banquet->philo[i].time_eat;
		tmp = banquet->time_die / 1000;
		if (result > tmp)
		{
			pthread_mutex_lock(&banquet->mutex_die);
			if (ft_display(&banquet->philo[i], banquet, "\033[1;31mdied\033[0;0m") == -1)
				return (NULL);
			banquet->end = TRUE; 
			pthread_mutex_unlock(&banquet->mutex_die);
			break ;	
		}
		/* if (banquet->nb_must_eat != -1 && philo->nb_eat == banquet->nb_must_eat) */
		/* { */
		/* 	if (ft_philo_nb_eat(banquet) == TRUE) */
		/* 	{	 */
		/* 		pthread_mutex_lock(&banquet->mutex_die); */
		/* 		banquet->end = TRUE;  */
		/* 		pthread_mutex_unlock(&banquet->mutex_die); */
		/* 	} */
		/* } */
		i++;
		if (i == banquet->nb_philo)
			i = 0;
	}

	return (NULL);
}

void	*start_routine(void *struc)
{
	t_philo			*philo;
	t_banquet 		*banquet;

	philo = (t_philo *)struc;
	banquet = (t_banquet *)philo->banquet;
	while (banquet->end == FALSE)
	{
		if (ft_is_thinking(philo) == -1)
			return (NULL);
		if (banquet->end == FALSE)
		{
			if (ft_is_eating(philo, banquet) == -1)
				return (NULL);
		}
		if (banquet->end == FALSE)
		{
			if (ft_display(philo, banquet, "\033[1;33mis sleeping\033[0;0m") == -1)
				return (NULL);
			usleep(banquet->time_sleep);
		}
	}
	return (NULL);
}


int	ft_create_thread(t_banquet *banquet)
{
	int		i;
	t_philo	*philo;

	i = 0;
	philo = banquet->philo;
	banquet->time_start = ft_time_start();
	while (i < banquet->nb_philo)
	{
		if (pthread_create(&(philo[i].thread), NULL, start_routine,
			&(philo[i])) != 0)
		{
			ft_putendl_fd("Error : pthread_create", 2);
			return (-1);
		}	
		i++;
	}	
	if (pthread_create(&banquet->th_death, NULL, ft_verif_die,
			&banquet) != 0)
	{
		ft_putendl_fd("Error : pthread_create", 2);
		return (-1);
	}
	return (0);
}

int	ft_philo(t_banquet *banquet)
{
	if (ft_create_mutex_fork(banquet) == 1)
	{
		ft_free(banquet);
		return (-1);
	}
	if (ft_create_thread(banquet) == 1)
	{
		ft_free(banquet);
		return (-1);
	}
	if (ft_destroy_mutex(banquet) == 1)
	{
		ft_free(banquet);
		return (-1);
	}
	return (0);
}
